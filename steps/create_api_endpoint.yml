id: create_api_endpoint
learningObjectives: 
- Implement a new API endpoint
- Manipulate database using mongoose
hints:
- You can use model.deleteMany() function 
- Remember to validate whether the user who is attempting to delete items is the same user who uploaded them.
startFlow:
  do:
  - actionId: bot_message
    params:
      person: keen
      messages:
      - text: "Hey, how's it going?"
        delay: 1000
      - text: "We've been getting a lot of feedback from our customers, and one thing they've been asking for is the ability to select multiple items and delete them all at once. This would be a really useful feature for them and could save a lot of time and effort."
        delay: 2000
      - text: "To make this happen, we need to start by creating an endpoint to receive the selected items. This will allow us to process the requests and delete the items in one go."
        delay: 2000
      - text: "Can you please go ahead to the backend folder and create the endpoint? This is an important first step in implementing this feature and will help us move forward with development."
        delay: 2000
      - text: "Open a PR when you're done."
        delay: 1000
githubActions:
  frontend:
    capabilities:
    - jest-puppeteer
    testFile: "items.test.js"
trigger:
  type: github_pr_lifecycle_status
  flowNode:
    switch: 
      key: "${eventType}"
      cases: 
        github_pr_opened:
          do: 
            - actionId: bot_message
              params:
                person: keen
                messages:
                - text: On that was fast, I'll review the changes right away.     
                  delay: 1000
        github_pr_workflow_complete_success:
          do:
            - actionId: bot_message
              params: 
                person: keen
                message:
                - text: "Nailed it! Excellent job @${user.githubuser}! You can now merge the PR."
                delay: 2000
            - actionId: github_pr_approve
              params:
                person: keen
                message: "Nailed it! Excellent job @${user.githubuser}! You can now merge the PR."
        github_pr_workflow_complete_failure:
          do:
            - actionId: bot_message
              params:
                person: keen
                messages:
                - text: "Make sure your fix passes all the checks, then try again please."
                delay: 3000
            - actionId: github_pr_reject
              params:
                person: keen
                message: "Looks like this code change didnâ€™t fix the problem. Can you take a second look?"
        github_pr_merged:
          do: 
            - actionId: finish_step
